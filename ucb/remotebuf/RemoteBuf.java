// Targeted by JavaCPP version 1.2.7: DO NOT EDIT THIS FILE

package ucb.remotebuf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class RemoteBuf extends ucb.remotebuf.config.RemoteBuf {
    static { Loader.load(); }

// Parsed from RemoteBuf.h

// #include <vector>
// #include <string>
// #include <future>
// #include <unordered_map>
// #include <cassert>
// #include <stdexcept>
// #include <mutex>
// #include <src/client/BladeClient.h>
// #include <src/client/RDMAClient.h>
// #include <src/common/AllocationRecord.h>
// #include "utils.h"

@Namespace("RemoteBuf") @MemberGetter public static native int INITIAL_BUFFER_SIZE();
@Namespace("RemoteBuf") @MemberGetter public static native byte RDMA_PORT(int i);
@Namespace("RemoteBuf") @MemberGetter public static native @Cast("const char*") BytePointer RDMA_PORT();
@Namespace("RemoteBuf") @MemberGetter public static native byte RDMA_ADDR(int i);
@Namespace("RemoteBuf") @MemberGetter public static native @Cast("const char*") BytePointer RDMA_ADDR();

/* Buffer is not reentrant */
@Namespace("RemoteBuf") @NoOffset public static class Buffer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Buffer(Pointer p) { super(p); }

    public Buffer(@StdString BytePointer Serv, @StdString BytePointer Port) { super((Pointer)null); allocate(Serv, Port); }
    private native void allocate(@StdString BytePointer Serv, @StdString BytePointer Port);
    public Buffer(@StdString String Serv, @StdString String Port) { super((Pointer)null); allocate(Serv, Port); }
    private native void allocate(@StdString String Serv, @StdString String Port);

    /* Writes buf with size s to LocalBuf */
    public native void write(@Cast("char*") BytePointer buf, @Cast("unsigned int") int s);
    public native void write(@Cast("char*") ByteBuffer buf, @Cast("unsigned int") int s);
    public native void write(@Cast("char*") byte[] buf, @Cast("unsigned int") int s);

    /* Writes buf with size s to LocalBuf at specified offset */
    public native void write(@Cast("char*") BytePointer buf, @Cast("unsigned int") int s, @Cast("unsigned int") int off);
    public native void write(@Cast("char*") ByteBuffer buf, @Cast("unsigned int") int s, @Cast("unsigned int") int off);
    public native void write(@Cast("char*") byte[] buf, @Cast("unsigned int") int s, @Cast("unsigned int") int off);

    /* Flush pending requests (write) */
    public native void flush();

    /* Copy LocalBuf to buf */
    public native void read(@Cast("char*") BytePointer buf);
    public native void read(@Cast("char*") ByteBuffer buf);
    public native void read(@Cast("char*") byte[] buf);

    /* Get the size of the buffer, regardless of where it is located. */
    public native @Cast("unsigned int") int getSize();
}

/* BufferManager not reentrant */
@Namespace("RemoteBuf") @NoOffset public static class BufferManager extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BufferManager(Pointer p) { super(p); }

    public BufferManager(@StdString BytePointer Serv, @StdString BytePointer Port) { super((Pointer)null); allocate(Serv, Port); }
    private native void allocate(@StdString BytePointer Serv, @StdString BytePointer Port);
    public BufferManager(@StdString String Serv, @StdString String Port) { super((Pointer)null); allocate(Serv, Port); }
    private native void allocate(@StdString String Serv, @StdString String Port);

    /* Creates buffer with specified id.
     * Throws an exception if the buffer already exists
     */
    public native Buffer createBuffer(@StdString BytePointer id);
    public native Buffer createBuffer(@StdString String id);

    /* Gets the buffer with specified id.
     * Throws an exception if the buffer doesn't exist
     */
    public native Buffer getBuffer(@StdString BytePointer id);
    public native Buffer getBuffer(@StdString String id);

    /* If the buffer exists, it is deleted.
     * If it doesn't, an exception is thrown.
     */
    public native void deleteBuffer(@StdString BytePointer id);
    public native void deleteBuffer(@StdString String id);

    /* Returns true if the buffer with specified id exists. */
    public native @Cast("bool") boolean bufferExists(@StdString BytePointer id);
    public native @Cast("bool") boolean bufferExists(@StdString String id);
}



}
